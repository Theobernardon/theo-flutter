name: Builder Flutter blueprint Workflow Réutilisable

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    inputs:
      platform:
        required: true
        type: string
        description: "plateforme à builder"
      os:
        required: true
        type: string
        description: "os à utiliser pour builder"
      path:
        required: true
        type: string
        description: "chemin de la build"
      release:
        required: false
        type: boolean
        description: "Si true, on build en release, sinon en debug (par défaut : false)"
        default: false

jobs:
  Build:
    name: ${{ inputs.platform }}
    runs-on: ${{ inputs.os }}
    steps:
      #### Partie 1 : Préparation ####
      # 1️⃣ - Cloner ton code source
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ - Installer Flutter avec pubspec.yaml, et cache automatique
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable # Utilise le canal stable pour la version de Flutter
          flutter-version-file: pubspec.yaml
          cache: true # Active le cache pub + flutter automatiquement

      # 3️⃣ - Récupérer les dépendances Dart/Flutter
      - name: Install dependencies
        run: flutter pub get

      # 4️⃣ - Installer les dépendances nécessaires pour Linux si on build sur Linux
      - name: Installer les dépendances Linux
        if: inputs.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev libglib2.0-dev

      # 5️⃣ - Builder l'application pour la plateforme spécifiée
      ## Build en release
      - name: Build for ${{ inputs.platform }} (release)
        if: inputs.release
        run: flutter build ${{ inputs.platform }} --release

      ## Build en debug
      - name: Build for ${{ inputs.platform }}
        if: inputs.release
        run: flutter build ${{ inputs.platform }} --debug

      #### Partie 2 : Archiver les artefacts de la build debug ####
      # 1️⃣ - Archiver les artefacts de la build pour la plateforme spécifiée
      - name: Archive ${{ inputs.platform }} build artifacts
        if: success() && !inputs.release
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-${{ inputs.platform }}
          path: ${{ inputs.path }}

      #### Partie 2' : Constructions & archivage des artifacts de release ####
      ### Windows installer build Steps ###
      # 1️⃣ - Installer Inno Setup pour créer un installeur EXE
      - name: Install Inno Setup
        if: inputs.release && (inputs.platform == 'windows')
        run: choco install innosetup -y
        # Chocolatey est installé sur les runners GitHub Windows, donc "choco" fonctionne direct

      # 2️⃣ - Compiler ton script Inno Setup (.iss) pour générer l'installeur
      ## Sur une activation manuelle :
      - name: Create Installer with Inno Setup
        if: inputs.release && (inputs.platform == 'windows') && success() && github.ref_type != 'tag'
        run: ISCC installer.iss

      ## Sur une activation de tag :
      - name: Create Installer with Inno Setup
        if: inputs.release && (inputs.platform == 'windows') && success() && github.ref_type == 'tag'
        run: ISCC /DMyAppVersion=${{ github.ref_name }} installer.iss

      # 3️⃣ - Archiver les artefacts de la build windows
      - name: Archive windows build artifacts
        if: inputs.release && (inputs.platform == 'windows') && success()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-windows
          path: installer/output/SetupMonApp.exe

      ### Linux Build Steps ###
      # 1️⃣ - Archiver les artefacts de la build Linux
      - name: Archive Linux bundle into tar.gz
        if: inputs.platform == 'linux' && success() && inputs.release
        run: tar -czf flutter-linux.tar.gz -C build/linux/x64/release/bundle .

      # 2️⃣ - Télécharger l'artefact de construction Linux
      - name: Télécharger l'artefact Linux compressé
        if: inputs.platform == 'linux' && success() && inputs.release
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-linux
          path: flutter-linux.tar.gz
