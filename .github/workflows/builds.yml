name: Builder Flutter Workflow Réutilisable

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    inputs:
      platforms:
        required: true
        type: string
        description: "Liste des plateformes à builder, séparées par des virgules (ex: apk, ios, web)"

jobs:
  Builds:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        platforms: ${{ fromJson(inputs.platforms) }} # Récupère la liste des plateformes à builder
        include:
          - if: contains(matrix.platform, 'windows')
            platforms: windows
            os: windows-latest
            path: build\windows\x64\runner\Release\
          - platforms: linux
            os: ubuntu-latest
            path: build/linux/x64/release/bundle/
          - platform: macos
            os: macos-latest
            path: build/macos/Build/**/*.app # a tester
          - platform: android
            os: ubuntu-latest
            path: build/app/outputs/flutter-apk/ # a tester
          - platform: ios
            os: macos-latest
            path: build/ios/iphoneos/*.ipa # a tester
          - platform: web
            os: ubuntu-latest
            path: build/web # a tester

    steps:
      # 1️⃣ - Cloner ton code source
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ - Installer Flutter 3.29.2 précisément, avec cache automatique
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: stable #### test si ça fonctionne avec stable
          cache: true # Active le cache pub + flutter automatiquement

      # 3️⃣ - Récupérer les dépendances Dart/Flutter
      - name: Install dependencies
        run: flutter pub get

      ### partie build ###
      ## parie windows ##
      # 4️⃣ - Builder ton application Windows
      - name: Build for Windows
        if: matrix.platform == 'windows'
        run: flutter build windows

      # 5️⃣ - Archiver les artefacts de la build Windows
      - name: Archive Windows build artifacts
        if: matrix.platform == 'windows' && success()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-windows
          path: build\windows\x64\runner\Release\

      ## partie Linux ##
      # 4️⃣ - Installer les dépendances nécessaires pour Linux
      - name: Installer les dépendances Linux
        if: matrix.platform == 'linux'
        run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev libglib2.0-dev

      # 5️⃣ - Builder ton application Linux
      - name: Build for Linux
        if: matrix.platform == 'linux'
        run: flutter build linux

      # 6️⃣ - Archiver les artefacts de la build Linux
      - name: Archive Linux build artifacts
        if: matrix.platform == 'linux' && success()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-linux
          path: build/linux/x64/release/bundle/

      ## partie MacOS ##
      # 4️⃣ - Builder ton application MacOS
      - name: Build for MacOS
        if: matrix.platform == 'macos'
        run: flutter build macos

      # 5️⃣ - Archiver les artefacts de la build MacOS
      - name: Archive MacOS build artifacts
        if: matrix.platform == 'macos' && success()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-macos
          path: build/macos/Build/**/*.app
