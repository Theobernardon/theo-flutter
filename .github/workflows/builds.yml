name: Builder Flutter Workflow Réutilisable

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    inputs:
      platforms:
        required: true
        type: string
        description: "Liste des plateformes à builder (ex: '[\"linux\", \"windows\"]')"
      mode:
        required: true
        type: string
        description: "release ou debug"

jobs:  
  matrix:
    strategy:
      matrix:
        platform: ${{ fromJson(inputs.platforms) }} # '["linux", "windows", "macos", "apk", "ios", "web"]'
        os: [ubuntu-latest, windows-latest, macos-latest]
      # Exclusions des plateformes pour chaque OS
        exclude:
          # Exclusions des windows:
          - platform: linux        # Table des exclusions pour les plateformes
            os: windows-latest     # O --> valid | X --> excluded
          - platform: macos        #         |linux|windows|macos|ios|web|apk|
            os: windows-latest     # linux   |  O  |   X   |  X  | X | O | O |
          - platform: ios          # windows |  X  |   O   |  X  | X | X | X |
            os: windows-latest     # macos   |  X  |   X   |  O  | O | X | X |
          - platform: web
            os: windows-latest
          - platform: apk
            os: windows-latest
          # Exclusions des macos:
          - platform: linux
            os: macos-latest
          - platform: windows
            os: macos-latest
          - platform: web
            os: macos-latest
          - platform: apk
            os: macos-latest
          # Exclusions des linux:
          - platform: windows
            os: ubuntu-latest
          - platform: macos
            os: ubuntu-latest
          - platform: ios
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.platform }} (${{ inputs.mode }})
    steps:
      # Vérification des correspondances platform / os
      - name: Debug matrix context
        run: echo "platform=${{ matrix.platform }}, os=${{ matrix.os }}"

      #### Partie 1 : Préparation ####
      # 1️⃣ - Cloner ton code source
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ - Installer Flutter avec pubspec.yaml, et cache automatique
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable # Utilise le canal stable pour la version de Flutter
          flutter-version-file: pubspec.yaml
          cache: true # Active le cache pub + flutter automatiquement

      # 3️⃣ - Récupérer les dépendances Dart/Flutter
      - name: Install dependencies
        run: flutter pub get

      # 3️⃣bis - Automatisation de la création des icônes par flutter_launcher_icons
      - name: Création des icônes
        run: dart run flutter_launcher_icons

      # 4️⃣ - Installer les dépendances nécessaires pour Linux si on build sur Linux
      - name: Installer les dépendances Linux
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev libglib2.0-dev

      # 5️⃣ - Builder l'application pour la plateforme spécifiée
      - name: Build for ${{ matrix.platform }} (${{ inputs.mode }})
        id: build
        uses: Theobernardon/theo-flutter/.github/actions/flutter-build@main
        with:
          platform: ${{ matrix.platform }}
          mode: ${{ inputs.mode }}

      #### Partie 2 : Archiver les artefacts de la build debug ####
      # 1️⃣ - Archiver les artefacts de la build pour la plateforme spécifiée
      - name: Archive ${{ matrix.platform }} build artifacts (debug only)
        if: ${{ success() && inputs.mode == 'debug' }}
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-${{ matrix.platform }}
          path: ${{ env.PARENT_DIR }}

      #### Partie 2' : Constructions & archivage des artifacts de release ####
      ### Windows installer build Steps ###
      # 1️⃣ - Installer Inno Setup pour créer un installeur EXE
      - name: Install Inno Setup (release windows only)
        if: ${{ inputs.mode == 'release' && matrix.platform == 'windows' }}
        run: choco install innosetup -y
        # Chocolatey est installé sur les runners GitHub Windows, donc "choco" fonctionne direct

      # 2️⃣ - Compiler ton script Inno Setup (.iss) pour générer l'installeur
      ## Sur une activation manuelle :
      - name: Create Installer with Inno Setup (release windows on manual only)
        if: ${{ inputs.mode == 'release' && matrix.platform == 'windows' && success() && github.ref_type != 'tag' }} 
        run: ISCC installer.iss

      ## Sur une activation de tag :
      - name: Create Installer with Inno Setup (release windows on tag only)
        if: ${{ inputs.mode == 'release' && matrix.platform == 'windows' && success() && github.ref_type == 'tag' }} 
        run: ISCC /DMyAppVersion=${{ github.ref_name }} installer.iss

      # 3️⃣ - Archiver les artefacts de la build windows
      - name: Archive windows build artifacts
        if: ${{ inputs.mode == 'release' && matrix.platform == 'windows' && success() }}
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-windows
          path: installer/output/SetupMonApp.exe

      ### Linux Build Steps ###
      # 1️⃣ - Archiver les artefacts de la build Linux
      - name: Archive Linux bundle into tar.gz
        if: ${{ inputs.mode == 'release' && matrix.platform == 'linux' && success() }} 
        run: tar -czf flutter-linux.tar.gz -C build/linux/x64/release/bundle .

      # 2️⃣ - Télécharger l'artefact de construction Linux
      - name: Télécharger l'artefact Linux compressé
        if: ${{ inputs.mode == 'release' && matrix.platform == 'linux' && success() }}
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-linux
          path: flutter-linux.tar.gz
